
import { supabase } from '@/integrations/supabase/client';

export const debugUserConsistency = async () => {
  try {
    console.log('=== DEBUG: VERIFICA√á√ÉO COMPLETA DO SISTEMA ===');
    
    // 1. Buscar todos os profiles (limitado pelas pol√≠ticas RLS)
    console.log('üìã VERIFICANDO PROFILES ACESS√çVEIS...');
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, first_name, last_name, email, role, created_at');
    
    if (profilesError) {
      console.error('Erro ao buscar profiles:', profilesError);
      console.log('‚ö†Ô∏è POSS√çVEL PROBLEMA: RLS pode estar bloqueando acesso aos profiles');
    } else {
      console.log('üìã PROFILES ENCONTRADOS:');
      console.log(`Total de profiles vis√≠veis: ${profiles?.length || 0}`);
      profiles?.forEach((profile, index) => {
        console.log(`Profile ${index + 1}:`, {
          id: profile.id,
          name: `${profile.first_name} ${profile.last_name}`,
          email: profile.email,
          role: profile.role,
          created_at: profile.created_at
        });
      });
    }
    
    // 2. Buscar usu√°rios na tabela clinic_staff
    console.log('üë• VERIFICANDO CLINIC_STAFF...');
    const { data: clinicStaff, error: staffError } = await supabase
      .from('clinic_staff')
      .select('user_id, role, clinic_id, is_admin, active, created_at');
    
    if (staffError) {
      console.error('Erro ao buscar clinic_staff:', staffError);
    } else {
      console.log('üë• CLINIC STAFF ENCONTRADOS:');
      console.log(`Total de registros clinic_staff: ${clinicStaff?.length || 0}`);
      clinicStaff?.forEach((staff, index) => {
        console.log(`Staff ${index + 1}:`, {
          user_id: staff.user_id,
          role: staff.role,
          clinic_id: staff.clinic_id,
          is_admin: staff.is_admin,
          active: staff.active,
          created_at: staff.created_at
        });
      });
      
      // 3. Verificar consist√™ncia entre profiles e clinic_staff
      console.log('üîç VERIFICANDO CONSIST√äNCIA:');
      const staffUserIds = clinicStaff?.map(s => s.user_id) || [];
      const profileIds = profiles?.map(p => p.id) || [];
      
      const missingProfiles = staffUserIds.filter(id => !profileIds.includes(id));
      const orphanProfiles = profileIds.filter(id => !staffUserIds.includes(id));
      
      if (missingProfiles.length > 0) {
        console.log('‚ùå USU√ÅRIOS SEM PROFILE:', missingProfiles);
        console.log('üîß A√á√ÉO NECESS√ÅRIA: Execute sincroniza√ß√£o de profiles');
      }
      
      if (orphanProfiles.length > 0) {
        console.log('‚ö†Ô∏è PROFILES SEM CLINIC_STAFF:', orphanProfiles);
        console.log('‚ÑπÔ∏è NOTA: Podem ser admins globais (normal)');
      }
      
      if (missingProfiles.length === 0 && orphanProfiles.length === 0) {
        console.log('‚úÖ Todos os usu√°rios t√™m profiles correspondentes');
      }
    }
    
    // 4. Verificar cl√≠nicas criadas
    const { data: clinics, error: clinicsError } = await supabase
      .from('clinics')
      .select('id, name, created_by, created_at');
    
    if (!clinicsError && clinics) {
      console.log('üè• CL√çNICAS CRIADAS:');
      console.log(`Total de cl√≠nicas: ${clinics.length}`);
      clinics.forEach((clinic, index) => {
        console.log(`Cl√≠nica ${index + 1}:`, {
          id: clinic.id,
          name: clinic.name,
          created_by: clinic.created_by,
          created_at: clinic.created_at
        });
      });
    }
    
    // 5. Verificar usu√°rios por role
    console.log('üë§ AN√ÅLISE POR ROLE:');
    const roleCount: Record<string, number> = {};
    profiles?.forEach(profile => {
      roleCount[profile.role] = (roleCount[profile.role] || 0) + 1;
    });
    
    console.log('Contagem por role:', roleCount);
    
    // 6. Identificar problemas principais
    console.log('üîß AN√ÅLISE DE PROBLEMAS:');
    
    if (profiles && profiles.length <= 1) {
      console.log('‚ö†Ô∏è PROBLEMA IDENTIFICADO: Apenas 1 usu√°rio admin encontrado');
      console.log('Isso indica que:');
      console.log('1. Novos usu√°rios podem n√£o estar sendo criados corretamente');
      console.log('2. Trigger handle_new_user pode n√£o estar funcionando');
      console.log('3. Usu√°rios podem estar sendo criados apenas na tabela auth.users');
      console.log('4. RLS pode estar bloqueando a visualiza√ß√£o');
    }
    
    // 7. Verifica√ß√µes de RLS
    console.log('üîí PROBLEMAS DE PERMISS√ÉO IDENTIFICADOS:');
    console.log('1. ‚ùå N√£o conseguimos acessar auth.users (esperado - tabela protegida)');
    console.log('2. ‚ùå N√£o conseguimos acessar information_schema (esperado - requer privil√©gios especiais)');
    console.log('3. ‚ö†Ô∏è Profiles podem estar com RLS muito restritivo');
    
    // 8. Recomenda√ß√µes
    console.log('üí° RECOMENDA√á√ïES PARA ADMIN:');
    console.log('1. Verifique no Supabase Dashboard > Authentication > Users');
    console.log('2. Execute as queries SQL no SQL Editor para ver dados completos');
    console.log('3. Verifique se o trigger on_auth_user_created existe');
    console.log('4. Considere ajustar pol√≠ticas RLS para admin global');
    
    // 9. An√°lise do fluxo
    await analyzeUserCreationFlow();
    
  } catch (error) {
    console.error('‚ùå Erro no debug de consist√™ncia:', error);
  }
};

const analyzeUserCreationFlow = async () => {
  console.log('üîÑ AN√ÅLISE DETALHADA DO FLUXO DE CRIA√á√ÉO:');
  
  console.log('\nüìù PASSO 1: VERIFICA√á√ÉO DO TRIGGER');
  console.log('‚ùå 1.1: N√£o conseguimos verificar se trigger existe via API');
  console.log('‚ùå 1.2: Precisamos verificar manualmente no SQL Editor');
  console.log('‚ùå 1.3: Fun√ß√£o handle_new_user pode n√£o existir ou estar mal configurada');
  
  console.log('\nüë§ PASSO 2: VERIFICA√á√ÉO AUTH.USERS ‚Üí PROFILES');
  console.log('‚ùå 2.1: N√£o temos acesso direto √† tabela auth.users');
  console.log('‚ùå 2.2: RLS impede visualiza√ß√£o de todos os profiles');
  console.log('‚ùå 2.3: Trigger pode n√£o estar executando corretamente');
  
  console.log('\nüè• PASSO 3: FLUXO ADMIN GLOBAL ‚Üí ADMIN CL√çNICA');
  console.log('Fluxo esperado:');
  console.log('1. Admin global cria cl√≠nica');
  console.log('2. Admin global convida admin de cl√≠nica');
  console.log('3. Admin de cl√≠nica faz cadastro/login');
  console.log('4. Trigger cria profile automaticamente');
  console.log('5. Admin global adiciona rela√ß√£o clinic_staff');
  
  console.log('\nüë• PASSO 4: FLUXO ADMIN CL√çNICA ‚Üí FUNCION√ÅRIOS');
  console.log('Fluxo esperado:');
  console.log('1. Admin de cl√≠nica convida funcion√°rio');
  console.log('2. Funcion√°rio faz cadastro no sistema');
  console.log('3. Trigger cria profile automaticamente');
  console.log('4. Admin de cl√≠nica adiciona √† equipe');
  
  console.log('\nüîß PROBLEMAS IDENTIFICADOS:');
  console.log('‚ùå 4.1: N√£o h√° interface para admin criar usu√°rios');
  console.log('‚ùå 4.2: N√£o h√° sistema de convites por email');
  console.log('‚ùå 4.3: Trigger pode n√£o estar funcionando');
  console.log('‚ùå 4.4: RLS muito restritivo para visualiza√ß√£o de dados');
  
  console.log('\nüöÄ SOLU√á√ïES RECOMENDADAS:');
  console.log('1. ‚úÖ Verificar trigger no SQL Editor do Supabase');
  console.log('2. ‚úÖ Ajustar pol√≠ticas RLS para admin global');
  console.log('3. ‚úÖ Implementar sistema de convites de usu√°rios');
  console.log('4. ‚úÖ Criar interface para gest√£o de usu√°rios');
  console.log('5. ‚úÖ Testar fluxo completo de cria√ß√£o de usu√°rios');
  
  console.log('\nüìã QUERIES PARA EXECUTAR NO SQL EDITOR:');
  console.log(`
    -- 1. Verificar usu√°rios auth vs profiles
    SELECT 
      'auth_users' as tabela, COUNT(*) as total 
    FROM auth.users
    UNION ALL
    SELECT 
      'profiles' as tabela, COUNT(*) as total 
    FROM public.profiles;
    
    -- 2. Verificar trigger
    SELECT tgname, tgenabled FROM pg_trigger 
    WHERE tgrelid = 'auth.users'::regclass;
    
    -- 3. Verificar fun√ß√£o handle_new_user
    SELECT proname, prosrc FROM pg_proc 
    WHERE proname = 'handle_new_user';
    
    -- 4. Ver todos os profiles (como admin)
    SELECT id, first_name, last_name, email, role, created_at 
    FROM public.profiles 
    ORDER BY created_at DESC;
  `);
};

export const syncMissingProfiles = async () => {
  try {
    console.log('=== SINCRONIZANDO PROFILES FALTANTES ===');
    
    const { data, error } = await supabase
      .rpc('sync_missing_profiles');
    
    if (error) {
      console.error('‚ùå Erro ao sincronizar profiles:', error);
      throw error;
    }
    
    console.log('‚úÖ SINCRONIZA√á√ÉO CONCLU√çDA');
    console.log('Profiles sincronizados:', data);
    
    if (data && data.length > 0) {
      console.log(`üìä RESUMO: ${data.length} profiles foram criados`);
      data.forEach((profile: any, index: number) => {
        console.log(`Profile ${index + 1}:`, {
          user_id: profile.synced_user_id,
          email: profile.synced_email,
          action: profile.action_taken
        });
      });
    } else {
      console.log('‚ÑπÔ∏è Nenhum profile precisou ser sincronizado');
    }
    
    return data;
    
  } catch (error) {
    console.error('‚ùå Erro na sincroniza√ß√£o de profiles:', error);
    throw error;
  }
};

export const debugAuthUsers = async () => {
  try {
    console.log('=== DEBUG: VERIFICANDO USU√ÅRIOS AUTH ===');
    console.log('‚ö†Ô∏è NOTA: Fun√ß√£o debug_get_auth_users com problema de tipo');
    
    // Tentar executar a fun√ß√£o mesmo com o erro conhecido
    const { data: authUsers, error: authError } = await supabase
      .rpc('debug_get_auth_users');
    
    if (authError) {
      console.error('‚ùå Erro esperado ao buscar usu√°rios auth:', authError);
      console.log('üîß SOLU√á√ÉO: Execute no SQL Editor do Supabase:');
      console.log(`
        -- Ver usu√°rios auth diretamente
        SELECT id, email, created_at, 
               EXISTS(SELECT 1 FROM public.profiles p WHERE p.id = auth.users.id) as has_profile
        FROM auth.users 
        ORDER BY created_at DESC;
      `);
      
      return { authUsers: [], error: authError };
    }
    
    console.log('üîê USU√ÅRIOS AUTH.USERS:');
    console.log(`Total de usu√°rios auth: ${authUsers?.length || 0}`);
    
    if (Array.isArray(authUsers)) {
      authUsers.forEach((user: any, index: number) => {
        console.log(`Auth User ${index + 1}:`, {
          id: user.auth_user_id,
          email: user.auth_email,
          created_at: user.auth_created_at,
          has_profile: user.has_profile
        });
      });
      
      const usersWithoutProfile = authUsers.filter((user: any) => !user.has_profile) || [];
      
      if (usersWithoutProfile.length > 0) {
        console.log('‚ùå USU√ÅRIOS SEM PROFILE:');
        usersWithoutProfile.forEach((user: any, index: number) => {
          console.log(`Usu√°rio sem profile ${index + 1}:`, {
            id: user.auth_user_id,
            email: user.auth_email,
            created_at: user.auth_created_at
          });
        });
      } else {
        console.log('‚úÖ Todos os usu√°rios auth t√™m profiles correspondentes');
      }
    }
    
    return { authUsers: authUsers || [], error: null };
    
  } catch (error) {
    console.error('‚ùå Erro no debug de usu√°rios auth:', error);
    return { authUsers: [], error };
  }
};

export const getClinicStaffData = async () => {
  try {
    console.log('=== BUSCANDO DADOS CLINIC_STAFF ===');
    
    const { data: clinicStaff, error } = await supabase
      .from('clinic_staff')
      .select(`
        id,
        user_id,
        clinic_id,
        role,
        is_admin,
        active,
        created_at,
        clinics (
          name
        )
      `)
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('‚ùå Erro ao buscar clinic_staff:', error);
      return { clinicStaff: [], error };
    }
    
    console.log('üë• DADOS CLINIC_STAFF:');
    console.log(`Total de registros: ${clinicStaff?.length || 0}`);
    
    const formattedStaff = clinicStaff?.map(staff => ({
      ...staff,
      clinic_name: staff.clinics?.name || 'N/A'
    })) || [];
    
    return { clinicStaff: formattedStaff, error: null };
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar clinic_staff:', error);
    return { clinicStaff: [], error };
  }
};
