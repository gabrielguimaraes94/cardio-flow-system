import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface RegisterClinicAdminPayload {
  adminData: {
    firstName: string;
    lastName: string;
    email: string;
    phone?: string;
    crm?: string;
  };
  clinicData: {
    name: string;
    city: string;
    address: string;
    phone: string;
    email: string;
    tradingName?: string;
    cnpj?: string;
  };
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') || Deno.env.get('SERVICE_ROLE_KEY');
    const supabaseAnonKey = Deno.env.get('SUPABASE_ANON_KEY');
    
    if (!supabaseUrl || !supabaseServiceKey || !supabaseAnonKey) {
      return new Response(
        JSON.stringify({ error: 'Configura√ß√£o do servidor incompleta' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const payload: RegisterClinicAdminPayload = await req.json();

    if (!payload.adminData?.email || !payload.adminData?.firstName || !payload.adminData?.lastName) {
      return new Response(
        JSON.stringify({ error: 'Dados do administrador s√£o obrigat√≥rios' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    if (!payload.clinicData?.name || !payload.clinicData?.city || !payload.clinicData?.address) {
      return new Response(
        JSON.stringify({ error: 'Dados da cl√≠nica s√£o obrigat√≥rios' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey);
    
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      return new Response(
        JSON.stringify({ error: 'Autoriza√ß√£o necess√°ria' }),
        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const supabaseNormal = createClient(supabaseUrl, supabaseAnonKey, {
      global: { headers: { Authorization: authHeader } }
    });

    const { data: { user: currentUser } } = await supabaseNormal.auth.getUser();
    if (!currentUser) {
      return new Response(
        JSON.stringify({ error: 'Usu√°rio n√£o autenticado' }),
        { status: 401, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Verificar se o usu√°rio atual √© admin global
    const { data: currentProfile } = await supabaseNormal.from('profiles').select('role').eq('id', currentUser.id).single();

    if (!currentProfile || currentProfile.role !== 'admin') {
      return new Response(
        JSON.stringify({ error: 'Apenas administradores globais podem registrar cl√≠nicas' }),
        { status: 403, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // =================
    // OPERA√á√ÉO TRANSACIONAL: Cl√≠nica + Admin
    // Se qualquer parte falhar, tudo √© revertido
    // =================

    let createdUserId: string | null = null;
    let createdClinicId: string | null = null;

    try {
      console.log('=== INICIANDO TRANSA√á√ÉO: CL√çNICA + ADMIN ===');

      // STEP 1: Verificar se email j√° existe (fail fast)
      console.log('Verificando email existente...');
      const { data: existingProfile } = await supabaseAdmin
        .from('profiles')
        .select('id, email')
        .eq('email', payload.adminData.email)
        .maybeSingle();

      if (existingProfile) {
        return new Response(
          JSON.stringify({ error: 'J√° existe um usu√°rio com este email' }),
          { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }

      // Verificar tamb√©m em auth.users
      const { data: authUsers, error: authCheckError } = await supabaseAdmin.auth.admin.listUsers();
      
      if (!authCheckError) {
        const existingAuthUser = authUsers.users?.find(u => u.email === payload.adminData.email);
        if (existingAuthUser) {
          return new Response(
            JSON.stringify({ error: 'Email j√° existe no sistema de autentica√ß√£o' }),
            { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
          );
        }
      }

      // STEP 2: Criar usu√°rio no auth.users
      console.log('Criando usu√°rio auth...');
      const createUserPayload = {
        email: payload.adminData.email,
        password: 'CardioFlow2024!',
        email_confirm: true,
        user_metadata: {
          first_name: payload.adminData.firstName || 'Nome',
          last_name: payload.adminData.lastName || 'Sobrenome',
          phone: payload.adminData.phone || '',
          crm: payload.adminData.crm || 'N/A',
          role: 'clinic_admin',
          title: '',
          bio: ''
        }
      };
      
      const { data: newUser, error: createUserError } = await supabaseAdmin.auth.admin.createUser(createUserPayload);

      if (createUserError || !newUser.user) {
        console.error('Erro ao criar usu√°rio:', createUserError);
        return new Response(
          JSON.stringify({ 
            error: `Erro ao criar usu√°rio: ${createUserError?.message}`,
            details: createUserError
          }),
          { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }

      createdUserId = newUser.user.id;
      console.log('‚úÖ Usu√°rio auth criado:', createdUserId);

      // STEP 3: Aguardar profile ser criado pelo trigger
      console.log('Aguardando profile ser criado...');
      let profileCreated = false;
      let attempts = 0;
      const maxAttempts = 15;

      while (!profileCreated && attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const { data: profileCheck } = await supabaseAdmin
          .from('profiles')
          .select('id, role, email')
          .eq('id', createdUserId)
          .maybeSingle();

        if (profileCheck) {
          profileCreated = true;
          console.log('‚úÖ Profile criado automaticamente pelo trigger');
        } else {
          attempts++;
          console.log(`Tentativa ${attempts}/${maxAttempts} para profile`);
        }
      }

      if (!profileCreated) {
        console.error('‚ùå Profile n√£o foi criado pelo trigger');
        // ROLLBACK: Deletar usu√°rio auth
        await supabaseAdmin.auth.admin.deleteUser(createdUserId);
        return new Response(
          JSON.stringify({ error: 'Falha ao criar perfil do usu√°rio' }),
          { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }

      // STEP 4: Criar cl√≠nica
      console.log('Criando cl√≠nica...');
      const { data: clinicResult, error: clinicError } = await supabaseAdmin.rpc('create_clinic', {
        p_name: payload.clinicData.name,
        p_city: payload.clinicData.city,
        p_address: payload.clinicData.address,
        p_phone: payload.clinicData.phone,
        p_email: payload.clinicData.email,
        p_created_by: currentUser.id,
        p_trading_name: payload.clinicData.tradingName || null,
        p_cnpj: payload.clinicData.cnpj || null
      });

      if (clinicError || !clinicResult?.id) {
        console.error('‚ùå Erro ao criar cl√≠nica:', clinicError);
        // ROLLBACK: Deletar usu√°rio auth
        await supabaseAdmin.auth.admin.deleteUser(createdUserId);
        return new Response(
          JSON.stringify({ 
            error: `Erro ao criar cl√≠nica: ${clinicError?.message}`,
            details: clinicError
          }),
          { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }

      createdClinicId = clinicResult.id;
      console.log('‚úÖ Cl√≠nica criada:', createdClinicId);

      // STEP 5: Associar usu√°rio √† cl√≠nica (transa√ß√£o final)
      console.log('Associando admin √† cl√≠nica...');
      const { error: staffError } = await supabaseAdmin
        .from('clinic_staff')
        .insert({
          user_id: createdUserId,
          clinic_id: createdClinicId,
          is_admin: true,
          role: 'clinic_admin',
          active: true
        });

      if (staffError) {
        console.error('‚ùå Erro ao associar usu√°rio √† cl√≠nica:', staffError);
        // ROLLBACK COMPLETO: Deletar usu√°rio E cl√≠nica
        await Promise.all([
          supabaseAdmin.auth.admin.deleteUser(createdUserId),
          supabaseAdmin.from('clinics').delete().eq('id', createdClinicId)
        ]);
        
        return new Response(
          JSON.stringify({ 
            error: `Erro ao associar usu√°rio √† cl√≠nica: ${staffError.message}`,
            details: staffError
          }),
          { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
        );
      }

      console.log('‚úÖ TRANSA√á√ÉO COMPLETA COM SUCESSO');

      return new Response(
        JSON.stringify({ 
          success: true,
          message: 'Cl√≠nica e administrador criados com sucesso!',
          data: {
            userId: createdUserId,
            clinicId: createdClinicId,
            adminEmail: payload.adminData.email,
            clinicName: payload.clinicData.name
          }
        }),
        { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );

    } catch (transactionError) {
      console.error('‚ùå ERRO NA TRANSA√á√ÉO:', transactionError);
      
      // ROLLBACK COMPLETO EM CASO DE EXCE√á√ÉO
      const rollbackPromises = [];
      
      if (createdUserId) {
        console.log('üîÑ ROLLBACK: Deletando usu√°rio auth');
        rollbackPromises.push(supabaseAdmin.auth.admin.deleteUser(createdUserId));
      }
      
      if (createdClinicId) {
        console.log('üîÑ ROLLBACK: Deletando cl√≠nica');
        rollbackPromises.push(supabaseAdmin.from('clinics').delete().eq('id', createdClinicId));
      }
      
      await Promise.allSettled(rollbackPromises);
      
      return new Response(
        JSON.stringify({ 
          error: 'Erro na transa√ß√£o - todas as opera√ß√µes foram revertidas',
          details: transactionError.message
        }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

  } catch (error) {
    console.error('‚ùå ERRO GERAL:', error);
    return new Response(
      JSON.stringify({ 
        error: 'Erro interno do servidor',
        details: error.message
      }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});